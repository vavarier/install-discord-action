#!/usr/bin/env python3
import os
from sys import *
import fileinput
import requests
import subprocess
class Colors:
    OK = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    END = '\033[0m'


def popen(cmd):
    process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, err = process.communicate()
    if err:
        print ("error occur with error : ", err.decode())
        exit 84


#help
def helping():
    print("Error in argument")
    print("    discordci                                             -> print help")
    print("    discordci update                                      -> update your bin")
    print("    discordci web [webhook link]                          -> change your webhook")
    print("    discordci repo [github ssh link]                      -> change the link of your empty repository")
    print("    discordci [path to the repo] [name of the project]    -> lauch mouli on your project")
    print("    discordci [path to the repo] norm                     -> only apply norm and your repo")
    exit (0)

#repo
def set_repo(argv):
    if (len(argv) != 3):
        helping()
    print("ready to reset the empty github repo")
    popen("sudo mv /usr/local/lib/discordci/weblink ~/")
    popen("sudo rm -rf /usr/local/lib/discordci")
    os.system("git clone " + argv[2] + " ~/discordci")
    popen("sudo mv ~/discordci /usr/local/lib/")
    popen("sudo mv ~/weblink /usr/local/lib/discordci/")
    print(Colors.OK + "Update Done" + Colors.END)
    exit (0)

#update
def update():
    print("ready to update your discordCI")
    os.system("git clone https://github.com/vavarier/install-discord-action ~/updatevanouri")
    popen("sudo rm -rf /usr/local/bin/discordci")
    popen("sudo cp ~/updatevanouri/src/discordci /usr/local/bin")
    popen("rm -rf ~/updatevanouri")
    print(Colors.OK + "Update Done" + Colors.END)
    exit (0)

#weblink
def set_weblink(argv):
    print("ready to reset the webhook")
    popen("echo " + argv[2] + " > /usr/local/lib/discordci/weblink")
    print(Colors.OK + "Update Done" + Colors.END)
    exit (0)

def param(command, argv):
    if (command == "update"):
        update()
    if (command == "repo"):
        set_repo(argv)
    if (command == "web"):
        set_weblink(argv)

#parsarg
def parsarg(command, argv):
    if(os.path.isdir(command) == False):
        print("Directory dasn't exist")
        exit (84)
    url = "https://github.com/moulitek/"
    url += argv[2]
    r = requests.head(url)
    r = str(r)[11:-2]
    if (r == str(404)):
        print("this repo dasn't exist if this an error pls set an issue")
        exit (84)

#normaluse
def sending(command, argv):
    if(command[-1] != '/'):
        command += '/'
    #fill the push
    popen("cp -rf " + command + "* /usr/local/lib/discordci")
    os.system("git clone https://github.com/moulitek/" + argv[2] + " ~/mouliDV")
    popen("cp -rf ~/mouliDV/.github ~/mouliDV/mouliVD /usr/local/lib/discordci")
    os.chdir("/usr/local/lib/discordci")
    popen("rm -rf ~/mouliDV")
    #push everything
    os.system("git add .")
    os.system("git commit -m new_push")
    os.system("git push")
    #clean the repo
    popen("mkdir ~/valencum")
    popen("cp -rf /usr/local/lib/discordci/.git /usr/local/lib/discordci/weblink ~/valencum")
    popen("rm -rf /usr/local/lib/discordci/* /usr/local/lib/discordci/.*")
    #reset the repo
    popen("mv ~/valencum /usr/local/lib/discordci")
    popen("mv /usr/local/lib/discordci/valencum/.git /usr/local/lib/discordci/valencum/weblink /usr/local/lib/discordci")
    popen("rm -rf /usr/local/lib/discordci/valencum")
    #push everything
    os.system("git add .")
    os.system("git commit -m new_push")
    os.system("git push")

if (len(argv) <= 1 or len(argv) >= 4):
    helping()
command = argv[1]

ref = [["update"], ["repo"], ["web"]]
for i in range(len(ref)):
    if (command == str(ref[i])[2:-2]):
        param(command, argv)

parsarg(command, argv)
sending(command, argv)
